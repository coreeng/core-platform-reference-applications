name: Refresh templates
on:
  push:
    branches:
      - workflow-dev
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs: {}

jobs:
  update-templates:
    runs-on: ubuntu-latest
    outputs:
      latest_ref: ${{ steps.push.outputs.commit_hash }}
      changed_templates: ${{ steps.render.outputs.changed_templates }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          path: ./reference-apps
          fetch-depth: 0
      - uses: actions/checkout@v4
        with:
          repository: coreeng/software-templates
          path: ./software-templates
      - uses: robinraju/release-downloader@v1.10
        with:
          repository: coreeng/corectl
          latest: true
          fileName: corectl_Linux_x86_64.tar.gz
          extract: true
          out-file-path: corectl
      - id: render
        run: |
          export PATH="${PATH}:$(realpath ./corectl)"
          all_templates=( $(corectl template list --templates ./software-templates) )
          changed_templates=()
          for t in "${all_templates[@]}"; do
            echo "Rendering template '$t'"
            rm -rf "./reference-apps/$t"
            mkdir -p "./reference-apps/$t"
            corectl template render "$t" "./reference-apps/$t" --templates ./software-templates
            git -C "./reference-apps" add "./$t"
            if [[ "$(git -C './reference-apps' status "./$t" --untracked-files=no --porcelain)" ]]; then
              echo "Template '$t' has changed!"
              changed_templates+=("$t")
            fi
          done
          ct_json=$(echo "${changed_templates[*]}" | jq -Rc 'split(" ")')
          echo "Changed templates: $ct_json"
          echo "changed_templates=$ct_json" >> $GITHUB_OUTPUT
          git -C "./reference-apps" status --porcelain
      - uses: stefanzweifel/git-auto-commit-action@v5
        id: push
        with:
          repository: ./reference-apps
          commit_message: "chore: update templates"
      - name: Failure Alert
        if: failure()
        uses: slackapi/slack-github-action@v1
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_ALERT_URL }}
        with:
          payload: |
            {
              "notification": "‚ùå Failed rendering software templates!",
              "workflow_link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
  p2p:
    needs: [update-templates]
    if: needs.update-templates.outputs.changed_templates != '[]'
    strategy:
      matrix:
        changed_template: ${{ fromJson(needs.update-templates.outputs.changed_templates) }}
    uses: ./.github/workflows/p2p.yaml
    with:
      lifecycle: ${{ matrix.changed_template }}
      ref: ${{ needs.render.outputs.latest_ref }}
    secrets:
      SLACK_WEBHOOK_ALERT_URL: ${{ secrets.SLACK_WEBHOOK_ALERT_URL }}
